Terminals unused in grammar

    HEADERFILE
    CONST
    ENUM
    WHIL
    LOGICAL_OR
    LOGICAL_AND


State 81 conflicts: 2 shift/reduce
State 105 conflicts: 2 shift/reduce
State 106 conflicts: 2 shift/reduce
State 107 conflicts: 2 shift/reduce
State 108 conflicts: 2 shift/reduce
State 109 conflicts: 8 shift/reduce
State 110 conflicts: 8 shift/reduce
State 111 conflicts: 2 shift/reduce
State 112 conflicts: 2 shift/reduce


Grammar

    0 $accept: start $end

    1 start: declaration
    2      | start declaration

    3 declaration: function
    4            | declaration_stmt

    5 function: datatype IDENTIFIER '(' arguments ')' comp_statement
    6         | VOID IDENTIFIER '(' arguments ')' comp_statement

    7 datatype: type pointer
    8         | VOID pointer
    9         | type

   10 pointer: '*' pointer
   11        | '*'

   12 type: sign type_specifier
   13     | type_specifier

   14 sign: SIGNED
   15     | UNSIGNED

   16 type_specifier: INT
   17               | CHAR
   18               | FLOAT
   19               | LONG
   20               | SHORT
   21               | LONGLONG
   22               | LONG INT
   23               | SHORT INT
   24               | LONGLONG INT

   25 arguments: args
   26          | VOID
   27          | %empty

   28 args: arguments ',' arg
   29     | arg

   30 arg: datatype IDENTIFIER

   31 comp_statement: '{' statements '}'

   32 statements: statement statements
   33           | %empty

   34 statement: comp_statement
   35          | stmt

   36 stmt: declaration_stmt
   37     | if_stmt
   38     | for_stmt
   39     | while_stmt
   40     | fn_call ';'
   41     | RETURN ';'
   42     | CONTINUE ';'
   43     | BREAK ';'
   44     | RETURN kt_expr ';'

   45 declaration_stmt: datatype variable_list ';'
   46                 | variable_list ';'
   47                 | unary_expr ';'

   48 variable_list: variable_list ',' variable
   49              | variable

   50 variable: IDENTIFIER
   51         | assignment_expr
   52         | array

   53 array: IDENTIFIER '{' kt_expr '}'

   54 assignment_expr: IDENTIFIER assign_op arithmetic_expr
   55                | IDENTIFIER assign_op array
   56                | IDENTIFIER assign_op fn_call
   57                | IDENTIFIER assign_op unary_expr
   58                | IDENTIFIER '=' string

   59 assign_op: '='
   60          | ADDASSIGN
   61          | SUBTRACTASSIGN
   62          | MULASSIGN
   63          | DIVIDEASSIGN
   64          | MODASSIGN

   65 kt_expr: kt_expr EQUAL kt_expr
   66        | kt_expr NOTEQUAL kt_expr
   67        | kt_expr '<' kt_expr
   68        | kt_expr '>' kt_expr
   69        | kt_expr GREATEREQUAL kt_expr
   70        | kt_expr LESSEREQUAL kt_expr
   71        | kt_expr LOGICALAND kt_expr
   72        | kt_expr LOGICALOR kt_expr
   73        | '!' kt_expr
   74        | arithmetic_expr
   75        | assignment_expr
   76        | unary_expr

   77 arithmetic_expr: '(' arithmetic_expr ')'
   78                | arithmetic_expr '+' arithmetic_expr
   79                | arithmetic_expr '-' arithmetic_expr
   80                | arithmetic_expr '*' arithmetic_expr
   81                | arithmetic_expr '/' arithmetic_expr
   82                | arithmetic_expr '%' arithmetic_expr
   83                | '-' arithmetic_expr
   84                | IDENTIFIER
   85                | constant
   86                | FLOATCONSTANT

   87 constant: DECIMALCONSTANT
   88         | HEXCONSTANT
   89         | CHARCONSTANT

   90 string: STR

   91 unary_expr: IDENTIFIER INCREMENT
   92           | IDENTIFIER DECREMENT
   93           | DECREMENT IDENTIFIER
   94           | INCREMENT IDENTIFIER

   95 fn_call: IDENTIFIER '(' parameters ')'
   96        | IDENTIFIER '(' ')'

   97 parameters: parameters ',' param
   98           | param

   99 param: kt_expr
  100      | STR

  101 expression: expression ',' kt_expr
  102           | kt_expr

  103 if_stmt: IF '(' expression ')' statement
  104        | IF '(' expression ')' statement ELSE statement

  105 while_stmt: WHILE '(' expression ')' statement

  106 for_expr: expression ';'
  107         | ';'

  108 for_stmt: FOR '(' for_expr for_expr expression ')' statement
  109         | FOR '(' for_expr for_expr ')' statement


Terminals, with rules where they appear

    $end (0) 0
    '!' (33) 73
    '%' (37) 82
    '(' (40) 5 6 77 95 96 103 104 105 108 109
    ')' (41) 5 6 77 95 96 103 104 105 108 109
    '*' (42) 10 11 80
    '+' (43) 78
    ',' (44) 28 48 97 101
    '-' (45) 79 83
    '/' (47) 81
    ';' (59) 40 41 42 43 44 45 46 47 106 107
    '<' (60) 67
    '=' (61) 58 59
    '>' (62) 68
    '{' (123) 31 53
    '}' (125) 31 53
    error (256)
    IDENTIFIER <str> (258) 5 6 30 50 53 54 55 56 57 58 84 91 92 93 94 95 96
    HEADERFILE <str> (259)
    INT (260) 16 22 23 24
    CHAR (261) 17
    FLOAT (262) 18
    SIGNED (263) 14
    UNSIGNED (264) 15
    SHORT (265) 20 23
    LONG (266) 19 22
    LONGLONG (267) 21 24
    CONST (268)
    ENUM (269)
    VOID (270) 6 8 26
    RETURN (271) 41 44
    IF (272) 103 104
    WHIL (273)
    ELSE (274) 104
    FOR (275) 108 109
    WHILE (276) 105
    BREAK (277) 43
    CONTINUE (278) 42
    HEXCONSTANT <str> (279) 88
    DECIMALCONSTANT <str> (280) 87
    FLOATCONSTANT <str> (281) 86
    CHARCONSTANT <str> (282) 89
    STR <str> (283) 90 100
    INCREMENT (284) 91 94
    DECREMENT (285) 92 93
    EQUAL (286) 65
    NOTEQUAL (287) 66
    GREATEREQUAL (288) 69
    LESSEREQUAL (289) 70
    LOGICALAND (290) 71
    LOGICALOR (291) 72
    ADDASSIGN (292) 60
    SUBTRACTASSIGN (293) 61
    MULASSIGN (294) 62
    DIVIDEASSIGN (295) 63
    MODASSIGN (296) 64
    LOGICAL_OR (297)
    LOGICAL_AND (298)
    NO_ELSE (299)
    UNARY (300)


Nonterminals, with rules where they appear

    $accept (61)
        on left: 0
    start (62)
        on left: 1 2
        on right: 0 2
    declaration (63)
        on left: 3 4
        on right: 1 2
    function (64)
        on left: 5 6
        on right: 3
    datatype (65)
        on left: 7 8 9
        on right: 5 30 45
    pointer (66)
        on left: 10 11
        on right: 7 8 10
    type (67)
        on left: 12 13
        on right: 7 9
    sign (68)
        on left: 14 15
        on right: 12
    type_specifier (69)
        on left: 16 17 18 19 20 21 22 23 24
        on right: 12 13
    arguments (70)
        on left: 25 26 27
        on right: 5 6 28
    args (71)
        on left: 28 29
        on right: 25
    arg (72)
        on left: 30
        on right: 28 29
    comp_statement (73)
        on left: 31
        on right: 5 6 34
    statements (74)
        on left: 32 33
        on right: 31 32
    statement (75)
        on left: 34 35
        on right: 32 103 104 105 108 109
    stmt (76)
        on left: 36 37 38 39 40 41 42 43 44
        on right: 35
    declaration_stmt (77)
        on left: 45 46 47
        on right: 4 36
    variable_list (78)
        on left: 48 49
        on right: 45 46 48
    variable (79)
        on left: 50 51 52
        on right: 48 49
    array (80)
        on left: 53
        on right: 52 55
    assignment_expr (81)
        on left: 54 55 56 57 58
        on right: 51 75
    assign_op (82)
        on left: 59 60 61 62 63 64
        on right: 54 55 56 57
    kt_expr (83)
        on left: 65 66 67 68 69 70 71 72 73 74 75 76
        on right: 44 53 65 66 67 68 69 70 71 72 73 99 101 102
    arithmetic_expr (84)
        on left: 77 78 79 80 81 82 83 84 85 86
        on right: 54 74 77 78 79 80 81 82 83
    constant (85)
        on left: 87 88 89
        on right: 85
    string (86)
        on left: 90
        on right: 58
    unary_expr (87)
        on left: 91 92 93 94
        on right: 47 57 76
    fn_call (88)
        on left: 95 96
        on right: 40 56
    parameters (89)
        on left: 97 98
        on right: 95 97
    param (90)
        on left: 99 100
        on right: 97 98
    expression (91)
        on left: 101 102
        on right: 101 103 104 105 106 108
    if_stmt (92)
        on left: 103 104
        on right: 37
    while_stmt (93)
        on left: 105
        on right: 39
    for_expr (94)
        on left: 106 107
        on right: 108 109
    for_stmt (95)
        on left: 108 109
        on right: 38


State 0

    0 $accept: . start $end

    IDENTIFIER  shift, and go to state 1
    INT         shift, and go to state 2
    CHAR        shift, and go to state 3
    FLOAT       shift, and go to state 4
    SIGNED      shift, and go to state 5
    UNSIGNED    shift, and go to state 6
    SHORT       shift, and go to state 7
    LONG        shift, and go to state 8
    LONGLONG    shift, and go to state 9
    VOID        shift, and go to state 10
    INCREMENT   shift, and go to state 11
    DECREMENT   shift, and go to state 12

    start             go to state 13
    declaration       go to state 14
    function          go to state 15
    datatype          go to state 16
    type              go to state 17
    sign              go to state 18
    type_specifier    go to state 19
    declaration_stmt  go to state 20
    variable_list     go to state 21
    variable          go to state 22
    array             go to state 23
    assignment_expr   go to state 24
    unary_expr        go to state 25


State 1

   50 variable: IDENTIFIER .
   53 array: IDENTIFIER . '{' kt_expr '}'
   54 assignment_expr: IDENTIFIER . assign_op arithmetic_expr
   55                | IDENTIFIER . assign_op array
   56                | IDENTIFIER . assign_op fn_call
   57                | IDENTIFIER . assign_op unary_expr
   58                | IDENTIFIER . '=' string
   91 unary_expr: IDENTIFIER . INCREMENT
   92           | IDENTIFIER . DECREMENT

    INCREMENT       shift, and go to state 26
    DECREMENT       shift, and go to state 27
    ADDASSIGN       shift, and go to state 28
    SUBTRACTASSIGN  shift, and go to state 29
    MULASSIGN       shift, and go to state 30
    DIVIDEASSIGN    shift, and go to state 31
    MODASSIGN       shift, and go to state 32
    '='             shift, and go to state 33
    '{'             shift, and go to state 34

    $default  reduce using rule 50 (variable)

    assign_op  go to state 35


State 2

   16 type_specifier: INT .

    $default  reduce using rule 16 (type_specifier)


State 3

   17 type_specifier: CHAR .

    $default  reduce using rule 17 (type_specifier)


State 4

   18 type_specifier: FLOAT .

    $default  reduce using rule 18 (type_specifier)


State 5

   14 sign: SIGNED .

    $default  reduce using rule 14 (sign)


State 6

   15 sign: UNSIGNED .

    $default  reduce using rule 15 (sign)


State 7

   20 type_specifier: SHORT .
   23               | SHORT . INT

    INT  shift, and go to state 36

    $default  reduce using rule 20 (type_specifier)


State 8

   19 type_specifier: LONG .
   22               | LONG . INT

    INT  shift, and go to state 37

    $default  reduce using rule 19 (type_specifier)


State 9

   21 type_specifier: LONGLONG .
   24               | LONGLONG . INT

    INT  shift, and go to state 38

    $default  reduce using rule 21 (type_specifier)


State 10

    6 function: VOID . IDENTIFIER '(' arguments ')' comp_statement
    8 datatype: VOID . pointer

    IDENTIFIER  shift, and go to state 39
    '*'         shift, and go to state 40

    pointer  go to state 41


State 11

   94 unary_expr: INCREMENT . IDENTIFIER

    IDENTIFIER  shift, and go to state 42


State 12

   93 unary_expr: DECREMENT . IDENTIFIER

    IDENTIFIER  shift, and go to state 43


State 13

    0 $accept: start . $end
    2 start: start . declaration

    $end        shift, and go to state 44
    IDENTIFIER  shift, and go to state 1
    INT         shift, and go to state 2
    CHAR        shift, and go to state 3
    FLOAT       shift, and go to state 4
    SIGNED      shift, and go to state 5
    UNSIGNED    shift, and go to state 6
    SHORT       shift, and go to state 7
    LONG        shift, and go to state 8
    LONGLONG    shift, and go to state 9
    VOID        shift, and go to state 10
    INCREMENT   shift, and go to state 11
    DECREMENT   shift, and go to state 12

    declaration       go to state 45
    function          go to state 15
    datatype          go to state 16
    type              go to state 17
    sign              go to state 18
    type_specifier    go to state 19
    declaration_stmt  go to state 20
    variable_list     go to state 21
    variable          go to state 22
    array             go to state 23
    assignment_expr   go to state 24
    unary_expr        go to state 25


State 14

    1 start: declaration .

    $default  reduce using rule 1 (start)


State 15

    3 declaration: function .

    $default  reduce using rule 3 (declaration)


State 16

    5 function: datatype . IDENTIFIER '(' arguments ')' comp_statement
   45 declaration_stmt: datatype . variable_list ';'

    IDENTIFIER  shift, and go to state 46

    variable_list    go to state 47
    variable         go to state 22
    array            go to state 23
    assignment_expr  go to state 24


State 17

    7 datatype: type . pointer
    9         | type .

    '*'  shift, and go to state 40

    $default  reduce using rule 9 (datatype)

    pointer  go to state 48


State 18

   12 type: sign . type_specifier

    INT       shift, and go to state 2
    CHAR      shift, and go to state 3
    FLOAT     shift, and go to state 4
    SHORT     shift, and go to state 7
    LONG      shift, and go to state 8
    LONGLONG  shift, and go to state 9

    type_specifier  go to state 49


State 19

   13 type: type_specifier .

    $default  reduce using rule 13 (type)


State 20

    4 declaration: declaration_stmt .

    $default  reduce using rule 4 (declaration)


State 21

   46 declaration_stmt: variable_list . ';'
   48 variable_list: variable_list . ',' variable

    ','  shift, and go to state 50
    ';'  shift, and go to state 51


State 22

   49 variable_list: variable .

    $default  reduce using rule 49 (variable_list)


State 23

   52 variable: array .

    $default  reduce using rule 52 (variable)


State 24

   51 variable: assignment_expr .

    $default  reduce using rule 51 (variable)


State 25

   47 declaration_stmt: unary_expr . ';'

    ';'  shift, and go to state 52


State 26

   91 unary_expr: IDENTIFIER INCREMENT .

    $default  reduce using rule 91 (unary_expr)


State 27

   92 unary_expr: IDENTIFIER DECREMENT .

    $default  reduce using rule 92 (unary_expr)


State 28

   60 assign_op: ADDASSIGN .

    $default  reduce using rule 60 (assign_op)


State 29

   61 assign_op: SUBTRACTASSIGN .

    $default  reduce using rule 61 (assign_op)


State 30

   62 assign_op: MULASSIGN .

    $default  reduce using rule 62 (assign_op)


State 31

   63 assign_op: DIVIDEASSIGN .

    $default  reduce using rule 63 (assign_op)


State 32

   64 assign_op: MODASSIGN .

    $default  reduce using rule 64 (assign_op)


State 33

   58 assignment_expr: IDENTIFIER '=' . string
   59 assign_op: '=' .

    STR  shift, and go to state 53

    $default  reduce using rule 59 (assign_op)

    string  go to state 54


State 34

   53 array: IDENTIFIER '{' . kt_expr '}'

    IDENTIFIER       shift, and go to state 55
    HEXCONSTANT      shift, and go to state 56
    DECIMALCONSTANT  shift, and go to state 57
    FLOATCONSTANT    shift, and go to state 58
    CHARCONSTANT     shift, and go to state 59
    INCREMENT        shift, and go to state 11
    DECREMENT        shift, and go to state 12
    '-'              shift, and go to state 60
    '!'              shift, and go to state 61
    '('              shift, and go to state 62

    assignment_expr  go to state 63
    kt_expr          go to state 64
    arithmetic_expr  go to state 65
    constant         go to state 66
    unary_expr       go to state 67


State 35

   54 assignment_expr: IDENTIFIER assign_op . arithmetic_expr
   55                | IDENTIFIER assign_op . array
   56                | IDENTIFIER assign_op . fn_call
   57                | IDENTIFIER assign_op . unary_expr

    IDENTIFIER       shift, and go to state 68
    HEXCONSTANT      shift, and go to state 56
    DECIMALCONSTANT  shift, and go to state 57
    FLOATCONSTANT    shift, and go to state 58
    CHARCONSTANT     shift, and go to state 59
    INCREMENT        shift, and go to state 11
    DECREMENT        shift, and go to state 12
    '-'              shift, and go to state 60
    '('              shift, and go to state 62

    array            go to state 69
    arithmetic_expr  go to state 70
    constant         go to state 66
    unary_expr       go to state 71
    fn_call          go to state 72


State 36

   23 type_specifier: SHORT INT .

    $default  reduce using rule 23 (type_specifier)


State 37

   22 type_specifier: LONG INT .

    $default  reduce using rule 22 (type_specifier)


State 38

   24 type_specifier: LONGLONG INT .

    $default  reduce using rule 24 (type_specifier)


State 39

    6 function: VOID IDENTIFIER . '(' arguments ')' comp_statement

    '('  shift, and go to state 73


State 40

   10 pointer: '*' . pointer
   11        | '*' .

    '*'  shift, and go to state 40

    $default  reduce using rule 11 (pointer)

    pointer  go to state 74


State 41

    8 datatype: VOID pointer .

    $default  reduce using rule 8 (datatype)


State 42

   94 unary_expr: INCREMENT IDENTIFIER .

    $default  reduce using rule 94 (unary_expr)


State 43

   93 unary_expr: DECREMENT IDENTIFIER .

    $default  reduce using rule 93 (unary_expr)


State 44

    0 $accept: start $end .

    $default  accept


State 45

    2 start: start declaration .

    $default  reduce using rule 2 (start)


State 46

    5 function: datatype IDENTIFIER . '(' arguments ')' comp_statement
   50 variable: IDENTIFIER .
   53 array: IDENTIFIER . '{' kt_expr '}'
   54 assignment_expr: IDENTIFIER . assign_op arithmetic_expr
   55                | IDENTIFIER . assign_op array
   56                | IDENTIFIER . assign_op fn_call
   57                | IDENTIFIER . assign_op unary_expr
   58                | IDENTIFIER . '=' string

    ADDASSIGN       shift, and go to state 28
    SUBTRACTASSIGN  shift, and go to state 29
    MULASSIGN       shift, and go to state 30
    DIVIDEASSIGN    shift, and go to state 31
    MODASSIGN       shift, and go to state 32
    '='             shift, and go to state 33
    '('             shift, and go to state 75
    '{'             shift, and go to state 34

    $default  reduce using rule 50 (variable)

    assign_op  go to state 35


State 47

   45 declaration_stmt: datatype variable_list . ';'
   48 variable_list: variable_list . ',' variable

    ','  shift, and go to state 50
    ';'  shift, and go to state 76


State 48

    7 datatype: type pointer .

    $default  reduce using rule 7 (datatype)


State 49

   12 type: sign type_specifier .

    $default  reduce using rule 12 (type)


State 50

   48 variable_list: variable_list ',' . variable

    IDENTIFIER  shift, and go to state 77

    variable         go to state 78
    array            go to state 23
    assignment_expr  go to state 24


State 51

   46 declaration_stmt: variable_list ';' .

    $default  reduce using rule 46 (declaration_stmt)


State 52

   47 declaration_stmt: unary_expr ';' .

    $default  reduce using rule 47 (declaration_stmt)


State 53

   90 string: STR .

    $default  reduce using rule 90 (string)


State 54

   58 assignment_expr: IDENTIFIER '=' string .

    $default  reduce using rule 58 (assignment_expr)


State 55

   54 assignment_expr: IDENTIFIER . assign_op arithmetic_expr
   55                | IDENTIFIER . assign_op array
   56                | IDENTIFIER . assign_op fn_call
   57                | IDENTIFIER . assign_op unary_expr
   58                | IDENTIFIER . '=' string
   84 arithmetic_expr: IDENTIFIER .
   91 unary_expr: IDENTIFIER . INCREMENT
   92           | IDENTIFIER . DECREMENT

    INCREMENT       shift, and go to state 26
    DECREMENT       shift, and go to state 27
    ADDASSIGN       shift, and go to state 28
    SUBTRACTASSIGN  shift, and go to state 29
    MULASSIGN       shift, and go to state 30
    DIVIDEASSIGN    shift, and go to state 31
    MODASSIGN       shift, and go to state 32
    '='             shift, and go to state 33

    $default  reduce using rule 84 (arithmetic_expr)

    assign_op  go to state 35


State 56

   88 constant: HEXCONSTANT .

    $default  reduce using rule 88 (constant)


State 57

   87 constant: DECIMALCONSTANT .

    $default  reduce using rule 87 (constant)


State 58

   86 arithmetic_expr: FLOATCONSTANT .

    $default  reduce using rule 86 (arithmetic_expr)


State 59

   89 constant: CHARCONSTANT .

    $default  reduce using rule 89 (constant)


State 60

   83 arithmetic_expr: '-' . arithmetic_expr

    IDENTIFIER       shift, and go to state 79
    HEXCONSTANT      shift, and go to state 56
    DECIMALCONSTANT  shift, and go to state 57
    FLOATCONSTANT    shift, and go to state 58
    CHARCONSTANT     shift, and go to state 59
    '-'              shift, and go to state 60
    '('              shift, and go to state 62

    arithmetic_expr  go to state 80
    constant         go to state 66


State 61

   73 kt_expr: '!' . kt_expr

    IDENTIFIER       shift, and go to state 55
    HEXCONSTANT      shift, and go to state 56
    DECIMALCONSTANT  shift, and go to state 57
    FLOATCONSTANT    shift, and go to state 58
    CHARCONSTANT     shift, and go to state 59
    INCREMENT        shift, and go to state 11
    DECREMENT        shift, and go to state 12
    '-'              shift, and go to state 60
    '!'              shift, and go to state 61
    '('              shift, and go to state 62

    assignment_expr  go to state 63
    kt_expr          go to state 81
    arithmetic_expr  go to state 65
    constant         go to state 66
    unary_expr       go to state 67


State 62

   77 arithmetic_expr: '(' . arithmetic_expr ')'

    IDENTIFIER       shift, and go to state 79
    HEXCONSTANT      shift, and go to state 56
    DECIMALCONSTANT  shift, and go to state 57
    FLOATCONSTANT    shift, and go to state 58
    CHARCONSTANT     shift, and go to state 59
    '-'              shift, and go to state 60
    '('              shift, and go to state 62

    arithmetic_expr  go to state 82
    constant         go to state 66


State 63

   75 kt_expr: assignment_expr .

    $default  reduce using rule 75 (kt_expr)


State 64

   53 array: IDENTIFIER '{' kt_expr . '}'
   65 kt_expr: kt_expr . EQUAL kt_expr
   66        | kt_expr . NOTEQUAL kt_expr
   67        | kt_expr . '<' kt_expr
   68        | kt_expr . '>' kt_expr
   69        | kt_expr . GREATEREQUAL kt_expr
   70        | kt_expr . LESSEREQUAL kt_expr
   71        | kt_expr . LOGICALAND kt_expr
   72        | kt_expr . LOGICALOR kt_expr

    EQUAL         shift, and go to state 83
    NOTEQUAL      shift, and go to state 84
    GREATEREQUAL  shift, and go to state 85
    LESSEREQUAL   shift, and go to state 86
    LOGICALAND    shift, and go to state 87
    LOGICALOR     shift, and go to state 88
    '<'           shift, and go to state 89
    '>'           shift, and go to state 90
    '}'           shift, and go to state 91


State 65

   74 kt_expr: arithmetic_expr .
   78 arithmetic_expr: arithmetic_expr . '+' arithmetic_expr
   79                | arithmetic_expr . '-' arithmetic_expr
   80                | arithmetic_expr . '*' arithmetic_expr
   81                | arithmetic_expr . '/' arithmetic_expr
   82                | arithmetic_expr . '%' arithmetic_expr

    '+'  shift, and go to state 92
    '-'  shift, and go to state 93
    '*'  shift, and go to state 94
    '/'  shift, and go to state 95
    '%'  shift, and go to state 96

    $default  reduce using rule 74 (kt_expr)


State 66

   85 arithmetic_expr: constant .

    $default  reduce using rule 85 (arithmetic_expr)


State 67

   76 kt_expr: unary_expr .

    $default  reduce using rule 76 (kt_expr)


State 68

   53 array: IDENTIFIER . '{' kt_expr '}'
   84 arithmetic_expr: IDENTIFIER .
   91 unary_expr: IDENTIFIER . INCREMENT
   92           | IDENTIFIER . DECREMENT
   95 fn_call: IDENTIFIER . '(' parameters ')'
   96        | IDENTIFIER . '(' ')'

    INCREMENT  shift, and go to state 26
    DECREMENT  shift, and go to state 27
    '('        shift, and go to state 97
    '{'        shift, and go to state 34

    $default  reduce using rule 84 (arithmetic_expr)


State 69

   55 assignment_expr: IDENTIFIER assign_op array .

    $default  reduce using rule 55 (assignment_expr)


State 70

   54 assignment_expr: IDENTIFIER assign_op arithmetic_expr .
   78 arithmetic_expr: arithmetic_expr . '+' arithmetic_expr
   79                | arithmetic_expr . '-' arithmetic_expr
   80                | arithmetic_expr . '*' arithmetic_expr
   81                | arithmetic_expr . '/' arithmetic_expr
   82                | arithmetic_expr . '%' arithmetic_expr

    '+'  shift, and go to state 92
    '-'  shift, and go to state 93
    '*'  shift, and go to state 94
    '/'  shift, and go to state 95
    '%'  shift, and go to state 96

    $default  reduce using rule 54 (assignment_expr)


State 71

   57 assignment_expr: IDENTIFIER assign_op unary_expr .

    $default  reduce using rule 57 (assignment_expr)


State 72

   56 assignment_expr: IDENTIFIER assign_op fn_call .

    $default  reduce using rule 56 (assignment_expr)


State 73

    6 function: VOID IDENTIFIER '(' . arguments ')' comp_statement

    INT       shift, and go to state 2
    CHAR      shift, and go to state 3
    FLOAT     shift, and go to state 4
    SIGNED    shift, and go to state 5
    UNSIGNED  shift, and go to state 6
    SHORT     shift, and go to state 7
    LONG      shift, and go to state 8
    LONGLONG  shift, and go to state 9
    VOID      shift, and go to state 98

    $default  reduce using rule 27 (arguments)

    datatype        go to state 99
    type            go to state 17
    sign            go to state 18
    type_specifier  go to state 19
    arguments       go to state 100
    args            go to state 101
    arg             go to state 102


State 74

   10 pointer: '*' pointer .

    $default  reduce using rule 10 (pointer)


State 75

    5 function: datatype IDENTIFIER '(' . arguments ')' comp_statement

    INT       shift, and go to state 2
    CHAR      shift, and go to state 3
    FLOAT     shift, and go to state 4
    SIGNED    shift, and go to state 5
    UNSIGNED  shift, and go to state 6
    SHORT     shift, and go to state 7
    LONG      shift, and go to state 8
    LONGLONG  shift, and go to state 9
    VOID      shift, and go to state 98

    $default  reduce using rule 27 (arguments)

    datatype        go to state 99
    type            go to state 17
    sign            go to state 18
    type_specifier  go to state 19
    arguments       go to state 103
    args            go to state 101
    arg             go to state 102


State 76

   45 declaration_stmt: datatype variable_list ';' .

    $default  reduce using rule 45 (declaration_stmt)


State 77

   50 variable: IDENTIFIER .
   53 array: IDENTIFIER . '{' kt_expr '}'
   54 assignment_expr: IDENTIFIER . assign_op arithmetic_expr
   55                | IDENTIFIER . assign_op array
   56                | IDENTIFIER . assign_op fn_call
   57                | IDENTIFIER . assign_op unary_expr
   58                | IDENTIFIER . '=' string

    ADDASSIGN       shift, and go to state 28
    SUBTRACTASSIGN  shift, and go to state 29
    MULASSIGN       shift, and go to state 30
    DIVIDEASSIGN    shift, and go to state 31
    MODASSIGN       shift, and go to state 32
    '='             shift, and go to state 33
    '{'             shift, and go to state 34

    $default  reduce using rule 50 (variable)

    assign_op  go to state 35


State 78

   48 variable_list: variable_list ',' variable .

    $default  reduce using rule 48 (variable_list)


State 79

   84 arithmetic_expr: IDENTIFIER .

    $default  reduce using rule 84 (arithmetic_expr)


State 80

   78 arithmetic_expr: arithmetic_expr . '+' arithmetic_expr
   79                | arithmetic_expr . '-' arithmetic_expr
   80                | arithmetic_expr . '*' arithmetic_expr
   81                | arithmetic_expr . '/' arithmetic_expr
   82                | arithmetic_expr . '%' arithmetic_expr
   83                | '-' arithmetic_expr .

    $default  reduce using rule 83 (arithmetic_expr)


State 81

   65 kt_expr: kt_expr . EQUAL kt_expr
   66        | kt_expr . NOTEQUAL kt_expr
   67        | kt_expr . '<' kt_expr
   68        | kt_expr . '>' kt_expr
   69        | kt_expr . GREATEREQUAL kt_expr
   70        | kt_expr . LESSEREQUAL kt_expr
   71        | kt_expr . LOGICALAND kt_expr
   72        | kt_expr . LOGICALOR kt_expr
   73        | '!' kt_expr .

    LOGICALAND  shift, and go to state 87
    LOGICALOR   shift, and go to state 88

    LOGICALAND  [reduce using rule 73 (kt_expr)]
    LOGICALOR   [reduce using rule 73 (kt_expr)]
    $default    reduce using rule 73 (kt_expr)


State 82

   77 arithmetic_expr: '(' arithmetic_expr . ')'
   78                | arithmetic_expr . '+' arithmetic_expr
   79                | arithmetic_expr . '-' arithmetic_expr
   80                | arithmetic_expr . '*' arithmetic_expr
   81                | arithmetic_expr . '/' arithmetic_expr
   82                | arithmetic_expr . '%' arithmetic_expr

    '+'  shift, and go to state 92
    '-'  shift, and go to state 93
    '*'  shift, and go to state 94
    '/'  shift, and go to state 95
    '%'  shift, and go to state 96
    ')'  shift, and go to state 104


State 83

   65 kt_expr: kt_expr EQUAL . kt_expr

    IDENTIFIER       shift, and go to state 55
    HEXCONSTANT      shift, and go to state 56
    DECIMALCONSTANT  shift, and go to state 57
    FLOATCONSTANT    shift, and go to state 58
    CHARCONSTANT     shift, and go to state 59
    INCREMENT        shift, and go to state 11
    DECREMENT        shift, and go to state 12
    '-'              shift, and go to state 60
    '!'              shift, and go to state 61
    '('              shift, and go to state 62

    assignment_expr  go to state 63
    kt_expr          go to state 105
    arithmetic_expr  go to state 65
    constant         go to state 66
    unary_expr       go to state 67


State 84

   66 kt_expr: kt_expr NOTEQUAL . kt_expr

    IDENTIFIER       shift, and go to state 55
    HEXCONSTANT      shift, and go to state 56
    DECIMALCONSTANT  shift, and go to state 57
    FLOATCONSTANT    shift, and go to state 58
    CHARCONSTANT     shift, and go to state 59
    INCREMENT        shift, and go to state 11
    DECREMENT        shift, and go to state 12
    '-'              shift, and go to state 60
    '!'              shift, and go to state 61
    '('              shift, and go to state 62

    assignment_expr  go to state 63
    kt_expr          go to state 106
    arithmetic_expr  go to state 65
    constant         go to state 66
    unary_expr       go to state 67


State 85

   69 kt_expr: kt_expr GREATEREQUAL . kt_expr

    IDENTIFIER       shift, and go to state 55
    HEXCONSTANT      shift, and go to state 56
    DECIMALCONSTANT  shift, and go to state 57
    FLOATCONSTANT    shift, and go to state 58
    CHARCONSTANT     shift, and go to state 59
    INCREMENT        shift, and go to state 11
    DECREMENT        shift, and go to state 12
    '-'              shift, and go to state 60
    '!'              shift, and go to state 61
    '('              shift, and go to state 62

    assignment_expr  go to state 63
    kt_expr          go to state 107
    arithmetic_expr  go to state 65
    constant         go to state 66
    unary_expr       go to state 67


State 86

   70 kt_expr: kt_expr LESSEREQUAL . kt_expr

    IDENTIFIER       shift, and go to state 55
    HEXCONSTANT      shift, and go to state 56
    DECIMALCONSTANT  shift, and go to state 57
    FLOATCONSTANT    shift, and go to state 58
    CHARCONSTANT     shift, and go to state 59
    INCREMENT        shift, and go to state 11
    DECREMENT        shift, and go to state 12
    '-'              shift, and go to state 60
    '!'              shift, and go to state 61
    '('              shift, and go to state 62

    assignment_expr  go to state 63
    kt_expr          go to state 108
    arithmetic_expr  go to state 65
    constant         go to state 66
    unary_expr       go to state 67


State 87

   71 kt_expr: kt_expr LOGICALAND . kt_expr

    IDENTIFIER       shift, and go to state 55
    HEXCONSTANT      shift, and go to state 56
    DECIMALCONSTANT  shift, and go to state 57
    FLOATCONSTANT    shift, and go to state 58
    CHARCONSTANT     shift, and go to state 59
    INCREMENT        shift, and go to state 11
    DECREMENT        shift, and go to state 12
    '-'              shift, and go to state 60
    '!'              shift, and go to state 61
    '('              shift, and go to state 62

    assignment_expr  go to state 63
    kt_expr          go to state 109
    arithmetic_expr  go to state 65
    constant         go to state 66
    unary_expr       go to state 67


State 88

   72 kt_expr: kt_expr LOGICALOR . kt_expr

    IDENTIFIER       shift, and go to state 55
    HEXCONSTANT      shift, and go to state 56
    DECIMALCONSTANT  shift, and go to state 57
    FLOATCONSTANT    shift, and go to state 58
    CHARCONSTANT     shift, and go to state 59
    INCREMENT        shift, and go to state 11
    DECREMENT        shift, and go to state 12
    '-'              shift, and go to state 60
    '!'              shift, and go to state 61
    '('              shift, and go to state 62

    assignment_expr  go to state 63
    kt_expr          go to state 110
    arithmetic_expr  go to state 65
    constant         go to state 66
    unary_expr       go to state 67


State 89

   67 kt_expr: kt_expr '<' . kt_expr

    IDENTIFIER       shift, and go to state 55
    HEXCONSTANT      shift, and go to state 56
    DECIMALCONSTANT  shift, and go to state 57
    FLOATCONSTANT    shift, and go to state 58
    CHARCONSTANT     shift, and go to state 59
    INCREMENT        shift, and go to state 11
    DECREMENT        shift, and go to state 12
    '-'              shift, and go to state 60
    '!'              shift, and go to state 61
    '('              shift, and go to state 62

    assignment_expr  go to state 63
    kt_expr          go to state 111
    arithmetic_expr  go to state 65
    constant         go to state 66
    unary_expr       go to state 67


State 90

   68 kt_expr: kt_expr '>' . kt_expr

    IDENTIFIER       shift, and go to state 55
    HEXCONSTANT      shift, and go to state 56
    DECIMALCONSTANT  shift, and go to state 57
    FLOATCONSTANT    shift, and go to state 58
    CHARCONSTANT     shift, and go to state 59
    INCREMENT        shift, and go to state 11
    DECREMENT        shift, and go to state 12
    '-'              shift, and go to state 60
    '!'              shift, and go to state 61
    '('              shift, and go to state 62

    assignment_expr  go to state 63
    kt_expr          go to state 112
    arithmetic_expr  go to state 65
    constant         go to state 66
    unary_expr       go to state 67


State 91

   53 array: IDENTIFIER '{' kt_expr '}' .

    $default  reduce using rule 53 (array)


State 92

   78 arithmetic_expr: arithmetic_expr '+' . arithmetic_expr

    IDENTIFIER       shift, and go to state 79
    HEXCONSTANT      shift, and go to state 56
    DECIMALCONSTANT  shift, and go to state 57
    FLOATCONSTANT    shift, and go to state 58
    CHARCONSTANT     shift, and go to state 59
    '-'              shift, and go to state 60
    '('              shift, and go to state 62

    arithmetic_expr  go to state 113
    constant         go to state 66


State 93

   79 arithmetic_expr: arithmetic_expr '-' . arithmetic_expr

    IDENTIFIER       shift, and go to state 79
    HEXCONSTANT      shift, and go to state 56
    DECIMALCONSTANT  shift, and go to state 57
    FLOATCONSTANT    shift, and go to state 58
    CHARCONSTANT     shift, and go to state 59
    '-'              shift, and go to state 60
    '('              shift, and go to state 62

    arithmetic_expr  go to state 114
    constant         go to state 66


State 94

   80 arithmetic_expr: arithmetic_expr '*' . arithmetic_expr

    IDENTIFIER       shift, and go to state 79
    HEXCONSTANT      shift, and go to state 56
    DECIMALCONSTANT  shift, and go to state 57
    FLOATCONSTANT    shift, and go to state 58
    CHARCONSTANT     shift, and go to state 59
    '-'              shift, and go to state 60
    '('              shift, and go to state 62

    arithmetic_expr  go to state 115
    constant         go to state 66


State 95

   81 arithmetic_expr: arithmetic_expr '/' . arithmetic_expr

    IDENTIFIER       shift, and go to state 79
    HEXCONSTANT      shift, and go to state 56
    DECIMALCONSTANT  shift, and go to state 57
    FLOATCONSTANT    shift, and go to state 58
    CHARCONSTANT     shift, and go to state 59
    '-'              shift, and go to state 60
    '('              shift, and go to state 62

    arithmetic_expr  go to state 116
    constant         go to state 66


State 96

   82 arithmetic_expr: arithmetic_expr '%' . arithmetic_expr

    IDENTIFIER       shift, and go to state 79
    HEXCONSTANT      shift, and go to state 56
    DECIMALCONSTANT  shift, and go to state 57
    FLOATCONSTANT    shift, and go to state 58
    CHARCONSTANT     shift, and go to state 59
    '-'              shift, and go to state 60
    '('              shift, and go to state 62

    arithmetic_expr  go to state 117
    constant         go to state 66


State 97

   95 fn_call: IDENTIFIER '(' . parameters ')'
   96        | IDENTIFIER '(' . ')'

    IDENTIFIER       shift, and go to state 55
    HEXCONSTANT      shift, and go to state 56
    DECIMALCONSTANT  shift, and go to state 57
    FLOATCONSTANT    shift, and go to state 58
    CHARCONSTANT     shift, and go to state 59
    STR              shift, and go to state 118
    INCREMENT        shift, and go to state 11
    DECREMENT        shift, and go to state 12
    '-'              shift, and go to state 60
    '!'              shift, and go to state 61
    '('              shift, and go to state 62
    ')'              shift, and go to state 119

    assignment_expr  go to state 63
    kt_expr          go to state 120
    arithmetic_expr  go to state 65
    constant         go to state 66
    unary_expr       go to state 67
    parameters       go to state 121
    param            go to state 122


State 98

    8 datatype: VOID . pointer
   26 arguments: VOID .

    '*'  shift, and go to state 40

    $default  reduce using rule 26 (arguments)

    pointer  go to state 41


State 99

   30 arg: datatype . IDENTIFIER

    IDENTIFIER  shift, and go to state 123


State 100

    6 function: VOID IDENTIFIER '(' arguments . ')' comp_statement
   28 args: arguments . ',' arg

    ','  shift, and go to state 124
    ')'  shift, and go to state 125


State 101

   25 arguments: args .

    $default  reduce using rule 25 (arguments)


State 102

   29 args: arg .

    $default  reduce using rule 29 (args)


State 103

    5 function: datatype IDENTIFIER '(' arguments . ')' comp_statement
   28 args: arguments . ',' arg

    ','  shift, and go to state 124
    ')'  shift, and go to state 126


State 104

   77 arithmetic_expr: '(' arithmetic_expr ')' .

    $default  reduce using rule 77 (arithmetic_expr)


State 105

   65 kt_expr: kt_expr . EQUAL kt_expr
   65        | kt_expr EQUAL kt_expr .
   66        | kt_expr . NOTEQUAL kt_expr
   67        | kt_expr . '<' kt_expr
   68        | kt_expr . '>' kt_expr
   69        | kt_expr . GREATEREQUAL kt_expr
   70        | kt_expr . LESSEREQUAL kt_expr
   71        | kt_expr . LOGICALAND kt_expr
   72        | kt_expr . LOGICALOR kt_expr

    GREATEREQUAL  shift, and go to state 85
    LESSEREQUAL   shift, and go to state 86
    LOGICALAND    shift, and go to state 87
    LOGICALOR     shift, and go to state 88
    '<'           shift, and go to state 89
    '>'           shift, and go to state 90

    LOGICALAND  [reduce using rule 65 (kt_expr)]
    LOGICALOR   [reduce using rule 65 (kt_expr)]
    $default    reduce using rule 65 (kt_expr)


State 106

   65 kt_expr: kt_expr . EQUAL kt_expr
   66        | kt_expr . NOTEQUAL kt_expr
   66        | kt_expr NOTEQUAL kt_expr .
   67        | kt_expr . '<' kt_expr
   68        | kt_expr . '>' kt_expr
   69        | kt_expr . GREATEREQUAL kt_expr
   70        | kt_expr . LESSEREQUAL kt_expr
   71        | kt_expr . LOGICALAND kt_expr
   72        | kt_expr . LOGICALOR kt_expr

    GREATEREQUAL  shift, and go to state 85
    LESSEREQUAL   shift, and go to state 86
    LOGICALAND    shift, and go to state 87
    LOGICALOR     shift, and go to state 88
    '<'           shift, and go to state 89
    '>'           shift, and go to state 90

    LOGICALAND  [reduce using rule 66 (kt_expr)]
    LOGICALOR   [reduce using rule 66 (kt_expr)]
    $default    reduce using rule 66 (kt_expr)


State 107

   65 kt_expr: kt_expr . EQUAL kt_expr
   66        | kt_expr . NOTEQUAL kt_expr
   67        | kt_expr . '<' kt_expr
   68        | kt_expr . '>' kt_expr
   69        | kt_expr . GREATEREQUAL kt_expr
   69        | kt_expr GREATEREQUAL kt_expr .
   70        | kt_expr . LESSEREQUAL kt_expr
   71        | kt_expr . LOGICALAND kt_expr
   72        | kt_expr . LOGICALOR kt_expr

    LOGICALAND  shift, and go to state 87
    LOGICALOR   shift, and go to state 88

    LOGICALAND  [reduce using rule 69 (kt_expr)]
    LOGICALOR   [reduce using rule 69 (kt_expr)]
    $default    reduce using rule 69 (kt_expr)


State 108

   65 kt_expr: kt_expr . EQUAL kt_expr
   66        | kt_expr . NOTEQUAL kt_expr
   67        | kt_expr . '<' kt_expr
   68        | kt_expr . '>' kt_expr
   69        | kt_expr . GREATEREQUAL kt_expr
   70        | kt_expr . LESSEREQUAL kt_expr
   70        | kt_expr LESSEREQUAL kt_expr .
   71        | kt_expr . LOGICALAND kt_expr
   72        | kt_expr . LOGICALOR kt_expr

    LOGICALAND  shift, and go to state 87
    LOGICALOR   shift, and go to state 88

    LOGICALAND  [reduce using rule 70 (kt_expr)]
    LOGICALOR   [reduce using rule 70 (kt_expr)]
    $default    reduce using rule 70 (kt_expr)


State 109

   65 kt_expr: kt_expr . EQUAL kt_expr
   66        | kt_expr . NOTEQUAL kt_expr
   67        | kt_expr . '<' kt_expr
   68        | kt_expr . '>' kt_expr
   69        | kt_expr . GREATEREQUAL kt_expr
   70        | kt_expr . LESSEREQUAL kt_expr
   71        | kt_expr . LOGICALAND kt_expr
   71        | kt_expr LOGICALAND kt_expr .
   72        | kt_expr . LOGICALOR kt_expr

    EQUAL         shift, and go to state 83
    NOTEQUAL      shift, and go to state 84
    GREATEREQUAL  shift, and go to state 85
    LESSEREQUAL   shift, and go to state 86
    LOGICALAND    shift, and go to state 87
    LOGICALOR     shift, and go to state 88
    '<'           shift, and go to state 89
    '>'           shift, and go to state 90

    EQUAL         [reduce using rule 71 (kt_expr)]
    NOTEQUAL      [reduce using rule 71 (kt_expr)]
    GREATEREQUAL  [reduce using rule 71 (kt_expr)]
    LESSEREQUAL   [reduce using rule 71 (kt_expr)]
    LOGICALAND    [reduce using rule 71 (kt_expr)]
    LOGICALOR     [reduce using rule 71 (kt_expr)]
    '<'           [reduce using rule 71 (kt_expr)]
    '>'           [reduce using rule 71 (kt_expr)]
    $default      reduce using rule 71 (kt_expr)


State 110

   65 kt_expr: kt_expr . EQUAL kt_expr
   66        | kt_expr . NOTEQUAL kt_expr
   67        | kt_expr . '<' kt_expr
   68        | kt_expr . '>' kt_expr
   69        | kt_expr . GREATEREQUAL kt_expr
   70        | kt_expr . LESSEREQUAL kt_expr
   71        | kt_expr . LOGICALAND kt_expr
   72        | kt_expr . LOGICALOR kt_expr
   72        | kt_expr LOGICALOR kt_expr .

    EQUAL         shift, and go to state 83
    NOTEQUAL      shift, and go to state 84
    GREATEREQUAL  shift, and go to state 85
    LESSEREQUAL   shift, and go to state 86
    LOGICALAND    shift, and go to state 87
    LOGICALOR     shift, and go to state 88
    '<'           shift, and go to state 89
    '>'           shift, and go to state 90

    EQUAL         [reduce using rule 72 (kt_expr)]
    NOTEQUAL      [reduce using rule 72 (kt_expr)]
    GREATEREQUAL  [reduce using rule 72 (kt_expr)]
    LESSEREQUAL   [reduce using rule 72 (kt_expr)]
    LOGICALAND    [reduce using rule 72 (kt_expr)]
    LOGICALOR     [reduce using rule 72 (kt_expr)]
    '<'           [reduce using rule 72 (kt_expr)]
    '>'           [reduce using rule 72 (kt_expr)]
    $default      reduce using rule 72 (kt_expr)


State 111

   65 kt_expr: kt_expr . EQUAL kt_expr
   66        | kt_expr . NOTEQUAL kt_expr
   67        | kt_expr . '<' kt_expr
   67        | kt_expr '<' kt_expr .
   68        | kt_expr . '>' kt_expr
   69        | kt_expr . GREATEREQUAL kt_expr
   70        | kt_expr . LESSEREQUAL kt_expr
   71        | kt_expr . LOGICALAND kt_expr
   72        | kt_expr . LOGICALOR kt_expr

    LOGICALAND  shift, and go to state 87
    LOGICALOR   shift, and go to state 88

    LOGICALAND  [reduce using rule 67 (kt_expr)]
    LOGICALOR   [reduce using rule 67 (kt_expr)]
    $default    reduce using rule 67 (kt_expr)


State 112

   65 kt_expr: kt_expr . EQUAL kt_expr
   66        | kt_expr . NOTEQUAL kt_expr
   67        | kt_expr . '<' kt_expr
   68        | kt_expr . '>' kt_expr
   68        | kt_expr '>' kt_expr .
   69        | kt_expr . GREATEREQUAL kt_expr
   70        | kt_expr . LESSEREQUAL kt_expr
   71        | kt_expr . LOGICALAND kt_expr
   72        | kt_expr . LOGICALOR kt_expr

    LOGICALAND  shift, and go to state 87
    LOGICALOR   shift, and go to state 88

    LOGICALAND  [reduce using rule 68 (kt_expr)]
    LOGICALOR   [reduce using rule 68 (kt_expr)]
    $default    reduce using rule 68 (kt_expr)


State 113

   78 arithmetic_expr: arithmetic_expr . '+' arithmetic_expr
   78                | arithmetic_expr '+' arithmetic_expr .
   79                | arithmetic_expr . '-' arithmetic_expr
   80                | arithmetic_expr . '*' arithmetic_expr
   81                | arithmetic_expr . '/' arithmetic_expr
   82                | arithmetic_expr . '%' arithmetic_expr

    '*'  shift, and go to state 94
    '/'  shift, and go to state 95
    '%'  shift, and go to state 96

    $default  reduce using rule 78 (arithmetic_expr)


State 114

   78 arithmetic_expr: arithmetic_expr . '+' arithmetic_expr
   79                | arithmetic_expr . '-' arithmetic_expr
   79                | arithmetic_expr '-' arithmetic_expr .
   80                | arithmetic_expr . '*' arithmetic_expr
   81                | arithmetic_expr . '/' arithmetic_expr
   82                | arithmetic_expr . '%' arithmetic_expr

    '*'  shift, and go to state 94
    '/'  shift, and go to state 95
    '%'  shift, and go to state 96

    $default  reduce using rule 79 (arithmetic_expr)


State 115

   78 arithmetic_expr: arithmetic_expr . '+' arithmetic_expr
   79                | arithmetic_expr . '-' arithmetic_expr
   80                | arithmetic_expr . '*' arithmetic_expr
   80                | arithmetic_expr '*' arithmetic_expr .
   81                | arithmetic_expr . '/' arithmetic_expr
   82                | arithmetic_expr . '%' arithmetic_expr

    $default  reduce using rule 80 (arithmetic_expr)


State 116

   78 arithmetic_expr: arithmetic_expr . '+' arithmetic_expr
   79                | arithmetic_expr . '-' arithmetic_expr
   80                | arithmetic_expr . '*' arithmetic_expr
   81                | arithmetic_expr . '/' arithmetic_expr
   81                | arithmetic_expr '/' arithmetic_expr .
   82                | arithmetic_expr . '%' arithmetic_expr

    $default  reduce using rule 81 (arithmetic_expr)


State 117

   78 arithmetic_expr: arithmetic_expr . '+' arithmetic_expr
   79                | arithmetic_expr . '-' arithmetic_expr
   80                | arithmetic_expr . '*' arithmetic_expr
   81                | arithmetic_expr . '/' arithmetic_expr
   82                | arithmetic_expr . '%' arithmetic_expr
   82                | arithmetic_expr '%' arithmetic_expr .

    $default  reduce using rule 82 (arithmetic_expr)


State 118

  100 param: STR .

    $default  reduce using rule 100 (param)


State 119

   96 fn_call: IDENTIFIER '(' ')' .

    $default  reduce using rule 96 (fn_call)


State 120

   65 kt_expr: kt_expr . EQUAL kt_expr
   66        | kt_expr . NOTEQUAL kt_expr
   67        | kt_expr . '<' kt_expr
   68        | kt_expr . '>' kt_expr
   69        | kt_expr . GREATEREQUAL kt_expr
   70        | kt_expr . LESSEREQUAL kt_expr
   71        | kt_expr . LOGICALAND kt_expr
   72        | kt_expr . LOGICALOR kt_expr
   99 param: kt_expr .

    EQUAL         shift, and go to state 83
    NOTEQUAL      shift, and go to state 84
    GREATEREQUAL  shift, and go to state 85
    LESSEREQUAL   shift, and go to state 86
    LOGICALAND    shift, and go to state 87
    LOGICALOR     shift, and go to state 88
    '<'           shift, and go to state 89
    '>'           shift, and go to state 90

    $default  reduce using rule 99 (param)


State 121

   95 fn_call: IDENTIFIER '(' parameters . ')'
   97 parameters: parameters . ',' param

    ','  shift, and go to state 127
    ')'  shift, and go to state 128


State 122

   98 parameters: param .

    $default  reduce using rule 98 (parameters)


State 123

   30 arg: datatype IDENTIFIER .

    $default  reduce using rule 30 (arg)


State 124

   28 args: arguments ',' . arg

    INT       shift, and go to state 2
    CHAR      shift, and go to state 3
    FLOAT     shift, and go to state 4
    SIGNED    shift, and go to state 5
    UNSIGNED  shift, and go to state 6
    SHORT     shift, and go to state 7
    LONG      shift, and go to state 8
    LONGLONG  shift, and go to state 9
    VOID      shift, and go to state 129

    datatype        go to state 99
    type            go to state 17
    sign            go to state 18
    type_specifier  go to state 19
    arg             go to state 130


State 125

    6 function: VOID IDENTIFIER '(' arguments ')' . comp_statement

    '{'  shift, and go to state 131

    comp_statement  go to state 132


State 126

    5 function: datatype IDENTIFIER '(' arguments ')' . comp_statement

    '{'  shift, and go to state 131

    comp_statement  go to state 133


State 127

   97 parameters: parameters ',' . param

    IDENTIFIER       shift, and go to state 55
    HEXCONSTANT      shift, and go to state 56
    DECIMALCONSTANT  shift, and go to state 57
    FLOATCONSTANT    shift, and go to state 58
    CHARCONSTANT     shift, and go to state 59
    STR              shift, and go to state 118
    INCREMENT        shift, and go to state 11
    DECREMENT        shift, and go to state 12
    '-'              shift, and go to state 60
    '!'              shift, and go to state 61
    '('              shift, and go to state 62

    assignment_expr  go to state 63
    kt_expr          go to state 120
    arithmetic_expr  go to state 65
    constant         go to state 66
    unary_expr       go to state 67
    param            go to state 134


State 128

   95 fn_call: IDENTIFIER '(' parameters ')' .

    $default  reduce using rule 95 (fn_call)


State 129

    8 datatype: VOID . pointer

    '*'  shift, and go to state 40

    pointer  go to state 41


State 130

   28 args: arguments ',' arg .

    $default  reduce using rule 28 (args)


State 131

   31 comp_statement: '{' . statements '}'

    IDENTIFIER  shift, and go to state 135
    INT         shift, and go to state 2
    CHAR        shift, and go to state 3
    FLOAT       shift, and go to state 4
    SIGNED      shift, and go to state 5
    UNSIGNED    shift, and go to state 6
    SHORT       shift, and go to state 7
    LONG        shift, and go to state 8
    LONGLONG    shift, and go to state 9
    VOID        shift, and go to state 129
    RETURN      shift, and go to state 136
    IF          shift, and go to state 137
    FOR         shift, and go to state 138
    WHILE       shift, and go to state 139
    BREAK       shift, and go to state 140
    CONTINUE    shift, and go to state 141
    INCREMENT   shift, and go to state 11
    DECREMENT   shift, and go to state 12
    '{'         shift, and go to state 131

    $default  reduce using rule 33 (statements)

    datatype          go to state 142
    type              go to state 17
    sign              go to state 18
    type_specifier    go to state 19
    comp_statement    go to state 143
    statements        go to state 144
    statement         go to state 145
    stmt              go to state 146
    declaration_stmt  go to state 147
    variable_list     go to state 21
    variable          go to state 22
    array             go to state 23
    assignment_expr   go to state 24
    unary_expr        go to state 25
    fn_call           go to state 148
    if_stmt           go to state 149
    while_stmt        go to state 150
    for_stmt          go to state 151


State 132

    6 function: VOID IDENTIFIER '(' arguments ')' comp_statement .

    $default  reduce using rule 6 (function)


State 133

    5 function: datatype IDENTIFIER '(' arguments ')' comp_statement .

    $default  reduce using rule 5 (function)


State 134

   97 parameters: parameters ',' param .

    $default  reduce using rule 97 (parameters)


State 135

   50 variable: IDENTIFIER .
   53 array: IDENTIFIER . '{' kt_expr '}'
   54 assignment_expr: IDENTIFIER . assign_op arithmetic_expr
   55                | IDENTIFIER . assign_op array
   56                | IDENTIFIER . assign_op fn_call
   57                | IDENTIFIER . assign_op unary_expr
   58                | IDENTIFIER . '=' string
   91 unary_expr: IDENTIFIER . INCREMENT
   92           | IDENTIFIER . DECREMENT
   95 fn_call: IDENTIFIER . '(' parameters ')'
   96        | IDENTIFIER . '(' ')'

    INCREMENT       shift, and go to state 26
    DECREMENT       shift, and go to state 27
    ADDASSIGN       shift, and go to state 28
    SUBTRACTASSIGN  shift, and go to state 29
    MULASSIGN       shift, and go to state 30
    DIVIDEASSIGN    shift, and go to state 31
    MODASSIGN       shift, and go to state 32
    '='             shift, and go to state 33
    '('             shift, and go to state 97
    '{'             shift, and go to state 34

    $default  reduce using rule 50 (variable)

    assign_op  go to state 35


State 136

   41 stmt: RETURN . ';'
   44     | RETURN . kt_expr ';'

    IDENTIFIER       shift, and go to state 55
    HEXCONSTANT      shift, and go to state 56
    DECIMALCONSTANT  shift, and go to state 57
    FLOATCONSTANT    shift, and go to state 58
    CHARCONSTANT     shift, and go to state 59
    INCREMENT        shift, and go to state 11
    DECREMENT        shift, and go to state 12
    '-'              shift, and go to state 60
    '!'              shift, and go to state 61
    '('              shift, and go to state 62
    ';'              shift, and go to state 152

    assignment_expr  go to state 63
    kt_expr          go to state 153
    arithmetic_expr  go to state 65
    constant         go to state 66
    unary_expr       go to state 67


State 137

  103 if_stmt: IF . '(' expression ')' statement
  104        | IF . '(' expression ')' statement ELSE statement

    '('  shift, and go to state 154


State 138

  108 for_stmt: FOR . '(' for_expr for_expr expression ')' statement
  109         | FOR . '(' for_expr for_expr ')' statement

    '('  shift, and go to state 155


State 139

  105 while_stmt: WHILE . '(' expression ')' statement

    '('  shift, and go to state 156


State 140

   43 stmt: BREAK . ';'

    ';'  shift, and go to state 157


State 141

   42 stmt: CONTINUE . ';'

    ';'  shift, and go to state 158


State 142

   45 declaration_stmt: datatype . variable_list ';'

    IDENTIFIER  shift, and go to state 77

    variable_list    go to state 47
    variable         go to state 22
    array            go to state 23
    assignment_expr  go to state 24


State 143

   34 statement: comp_statement .

    $default  reduce using rule 34 (statement)


State 144

   31 comp_statement: '{' statements . '}'

    '}'  shift, and go to state 159


State 145

   32 statements: statement . statements

    IDENTIFIER  shift, and go to state 135
    INT         shift, and go to state 2
    CHAR        shift, and go to state 3
    FLOAT       shift, and go to state 4
    SIGNED      shift, and go to state 5
    UNSIGNED    shift, and go to state 6
    SHORT       shift, and go to state 7
    LONG        shift, and go to state 8
    LONGLONG    shift, and go to state 9
    VOID        shift, and go to state 129
    RETURN      shift, and go to state 136
    IF          shift, and go to state 137
    FOR         shift, and go to state 138
    WHILE       shift, and go to state 139
    BREAK       shift, and go to state 140
    CONTINUE    shift, and go to state 141
    INCREMENT   shift, and go to state 11
    DECREMENT   shift, and go to state 12
    '{'         shift, and go to state 131

    $default  reduce using rule 33 (statements)

    datatype          go to state 142
    type              go to state 17
    sign              go to state 18
    type_specifier    go to state 19
    comp_statement    go to state 143
    statements        go to state 160
    statement         go to state 145
    stmt              go to state 146
    declaration_stmt  go to state 147
    variable_list     go to state 21
    variable          go to state 22
    array             go to state 23
    assignment_expr   go to state 24
    unary_expr        go to state 25
    fn_call           go to state 148
    if_stmt           go to state 149
    while_stmt        go to state 150
    for_stmt          go to state 151


State 146

   35 statement: stmt .

    $default  reduce using rule 35 (statement)


State 147

   36 stmt: declaration_stmt .

    $default  reduce using rule 36 (stmt)


State 148

   40 stmt: fn_call . ';'

    ';'  shift, and go to state 161


State 149

   37 stmt: if_stmt .

    $default  reduce using rule 37 (stmt)


State 150

   39 stmt: while_stmt .

    $default  reduce using rule 39 (stmt)


State 151

   38 stmt: for_stmt .

    $default  reduce using rule 38 (stmt)


State 152

   41 stmt: RETURN ';' .

    $default  reduce using rule 41 (stmt)


State 153

   44 stmt: RETURN kt_expr . ';'
   65 kt_expr: kt_expr . EQUAL kt_expr
   66        | kt_expr . NOTEQUAL kt_expr
   67        | kt_expr . '<' kt_expr
   68        | kt_expr . '>' kt_expr
   69        | kt_expr . GREATEREQUAL kt_expr
   70        | kt_expr . LESSEREQUAL kt_expr
   71        | kt_expr . LOGICALAND kt_expr
   72        | kt_expr . LOGICALOR kt_expr

    EQUAL         shift, and go to state 83
    NOTEQUAL      shift, and go to state 84
    GREATEREQUAL  shift, and go to state 85
    LESSEREQUAL   shift, and go to state 86
    LOGICALAND    shift, and go to state 87
    LOGICALOR     shift, and go to state 88
    '<'           shift, and go to state 89
    '>'           shift, and go to state 90
    ';'           shift, and go to state 162


State 154

  103 if_stmt: IF '(' . expression ')' statement
  104        | IF '(' . expression ')' statement ELSE statement

    IDENTIFIER       shift, and go to state 55
    HEXCONSTANT      shift, and go to state 56
    DECIMALCONSTANT  shift, and go to state 57
    FLOATCONSTANT    shift, and go to state 58
    CHARCONSTANT     shift, and go to state 59
    INCREMENT        shift, and go to state 11
    DECREMENT        shift, and go to state 12
    '-'              shift, and go to state 60
    '!'              shift, and go to state 61
    '('              shift, and go to state 62

    assignment_expr  go to state 63
    kt_expr          go to state 163
    arithmetic_expr  go to state 65
    constant         go to state 66
    unary_expr       go to state 67
    expression       go to state 164


State 155

  108 for_stmt: FOR '(' . for_expr for_expr expression ')' statement
  109         | FOR '(' . for_expr for_expr ')' statement

    IDENTIFIER       shift, and go to state 55
    HEXCONSTANT      shift, and go to state 56
    DECIMALCONSTANT  shift, and go to state 57
    FLOATCONSTANT    shift, and go to state 58
    CHARCONSTANT     shift, and go to state 59
    INCREMENT        shift, and go to state 11
    DECREMENT        shift, and go to state 12
    '-'              shift, and go to state 60
    '!'              shift, and go to state 61
    '('              shift, and go to state 62
    ';'              shift, and go to state 165

    assignment_expr  go to state 63
    kt_expr          go to state 163
    arithmetic_expr  go to state 65
    constant         go to state 66
    unary_expr       go to state 67
    expression       go to state 166
    for_expr         go to state 167


State 156

  105 while_stmt: WHILE '(' . expression ')' statement

    IDENTIFIER       shift, and go to state 55
    HEXCONSTANT      shift, and go to state 56
    DECIMALCONSTANT  shift, and go to state 57
    FLOATCONSTANT    shift, and go to state 58
    CHARCONSTANT     shift, and go to state 59
    INCREMENT        shift, and go to state 11
    DECREMENT        shift, and go to state 12
    '-'              shift, and go to state 60
    '!'              shift, and go to state 61
    '('              shift, and go to state 62

    assignment_expr  go to state 63
    kt_expr          go to state 163
    arithmetic_expr  go to state 65
    constant         go to state 66
    unary_expr       go to state 67
    expression       go to state 168


State 157

   43 stmt: BREAK ';' .

    $default  reduce using rule 43 (stmt)


State 158

   42 stmt: CONTINUE ';' .

    $default  reduce using rule 42 (stmt)


State 159

   31 comp_statement: '{' statements '}' .

    $default  reduce using rule 31 (comp_statement)


State 160

   32 statements: statement statements .

    $default  reduce using rule 32 (statements)


State 161

   40 stmt: fn_call ';' .

    $default  reduce using rule 40 (stmt)


State 162

   44 stmt: RETURN kt_expr ';' .

    $default  reduce using rule 44 (stmt)


State 163

   65 kt_expr: kt_expr . EQUAL kt_expr
   66        | kt_expr . NOTEQUAL kt_expr
   67        | kt_expr . '<' kt_expr
   68        | kt_expr . '>' kt_expr
   69        | kt_expr . GREATEREQUAL kt_expr
   70        | kt_expr . LESSEREQUAL kt_expr
   71        | kt_expr . LOGICALAND kt_expr
   72        | kt_expr . LOGICALOR kt_expr
  102 expression: kt_expr .

    EQUAL         shift, and go to state 83
    NOTEQUAL      shift, and go to state 84
    GREATEREQUAL  shift, and go to state 85
    LESSEREQUAL   shift, and go to state 86
    LOGICALAND    shift, and go to state 87
    LOGICALOR     shift, and go to state 88
    '<'           shift, and go to state 89
    '>'           shift, and go to state 90

    $default  reduce using rule 102 (expression)


State 164

  101 expression: expression . ',' kt_expr
  103 if_stmt: IF '(' expression . ')' statement
  104        | IF '(' expression . ')' statement ELSE statement

    ','  shift, and go to state 169
    ')'  shift, and go to state 170


State 165

  107 for_expr: ';' .

    $default  reduce using rule 107 (for_expr)


State 166

  101 expression: expression . ',' kt_expr
  106 for_expr: expression . ';'

    ','  shift, and go to state 169
    ';'  shift, and go to state 171


State 167

  108 for_stmt: FOR '(' for_expr . for_expr expression ')' statement
  109         | FOR '(' for_expr . for_expr ')' statement

    IDENTIFIER       shift, and go to state 55
    HEXCONSTANT      shift, and go to state 56
    DECIMALCONSTANT  shift, and go to state 57
    FLOATCONSTANT    shift, and go to state 58
    CHARCONSTANT     shift, and go to state 59
    INCREMENT        shift, and go to state 11
    DECREMENT        shift, and go to state 12
    '-'              shift, and go to state 60
    '!'              shift, and go to state 61
    '('              shift, and go to state 62
    ';'              shift, and go to state 165

    assignment_expr  go to state 63
    kt_expr          go to state 163
    arithmetic_expr  go to state 65
    constant         go to state 66
    unary_expr       go to state 67
    expression       go to state 166
    for_expr         go to state 172


State 168

  101 expression: expression . ',' kt_expr
  105 while_stmt: WHILE '(' expression . ')' statement

    ','  shift, and go to state 169
    ')'  shift, and go to state 173


State 169

  101 expression: expression ',' . kt_expr

    IDENTIFIER       shift, and go to state 55
    HEXCONSTANT      shift, and go to state 56
    DECIMALCONSTANT  shift, and go to state 57
    FLOATCONSTANT    shift, and go to state 58
    CHARCONSTANT     shift, and go to state 59
    INCREMENT        shift, and go to state 11
    DECREMENT        shift, and go to state 12
    '-'              shift, and go to state 60
    '!'              shift, and go to state 61
    '('              shift, and go to state 62

    assignment_expr  go to state 63
    kt_expr          go to state 174
    arithmetic_expr  go to state 65
    constant         go to state 66
    unary_expr       go to state 67


State 170

  103 if_stmt: IF '(' expression ')' . statement
  104        | IF '(' expression ')' . statement ELSE statement

    IDENTIFIER  shift, and go to state 135
    INT         shift, and go to state 2
    CHAR        shift, and go to state 3
    FLOAT       shift, and go to state 4
    SIGNED      shift, and go to state 5
    UNSIGNED    shift, and go to state 6
    SHORT       shift, and go to state 7
    LONG        shift, and go to state 8
    LONGLONG    shift, and go to state 9
    VOID        shift, and go to state 129
    RETURN      shift, and go to state 136
    IF          shift, and go to state 137
    FOR         shift, and go to state 138
    WHILE       shift, and go to state 139
    BREAK       shift, and go to state 140
    CONTINUE    shift, and go to state 141
    INCREMENT   shift, and go to state 11
    DECREMENT   shift, and go to state 12
    '{'         shift, and go to state 131

    datatype          go to state 142
    type              go to state 17
    sign              go to state 18
    type_specifier    go to state 19
    comp_statement    go to state 143
    statement         go to state 175
    stmt              go to state 146
    declaration_stmt  go to state 147
    variable_list     go to state 21
    variable          go to state 22
    array             go to state 23
    assignment_expr   go to state 24
    unary_expr        go to state 25
    fn_call           go to state 148
    if_stmt           go to state 149
    while_stmt        go to state 150
    for_stmt          go to state 151


State 171

  106 for_expr: expression ';' .

    $default  reduce using rule 106 (for_expr)


State 172

  108 for_stmt: FOR '(' for_expr for_expr . expression ')' statement
  109         | FOR '(' for_expr for_expr . ')' statement

    IDENTIFIER       shift, and go to state 55
    HEXCONSTANT      shift, and go to state 56
    DECIMALCONSTANT  shift, and go to state 57
    FLOATCONSTANT    shift, and go to state 58
    CHARCONSTANT     shift, and go to state 59
    INCREMENT        shift, and go to state 11
    DECREMENT        shift, and go to state 12
    '-'              shift, and go to state 60
    '!'              shift, and go to state 61
    '('              shift, and go to state 62
    ')'              shift, and go to state 176

    assignment_expr  go to state 63
    kt_expr          go to state 163
    arithmetic_expr  go to state 65
    constant         go to state 66
    unary_expr       go to state 67
    expression       go to state 177


State 173

  105 while_stmt: WHILE '(' expression ')' . statement

    IDENTIFIER  shift, and go to state 135
    INT         shift, and go to state 2
    CHAR        shift, and go to state 3
    FLOAT       shift, and go to state 4
    SIGNED      shift, and go to state 5
    UNSIGNED    shift, and go to state 6
    SHORT       shift, and go to state 7
    LONG        shift, and go to state 8
    LONGLONG    shift, and go to state 9
    VOID        shift, and go to state 129
    RETURN      shift, and go to state 136
    IF          shift, and go to state 137
    FOR         shift, and go to state 138
    WHILE       shift, and go to state 139
    BREAK       shift, and go to state 140
    CONTINUE    shift, and go to state 141
    INCREMENT   shift, and go to state 11
    DECREMENT   shift, and go to state 12
    '{'         shift, and go to state 131

    datatype          go to state 142
    type              go to state 17
    sign              go to state 18
    type_specifier    go to state 19
    comp_statement    go to state 143
    statement         go to state 178
    stmt              go to state 146
    declaration_stmt  go to state 147
    variable_list     go to state 21
    variable          go to state 22
    array             go to state 23
    assignment_expr   go to state 24
    unary_expr        go to state 25
    fn_call           go to state 148
    if_stmt           go to state 149
    while_stmt        go to state 150
    for_stmt          go to state 151


State 174

   65 kt_expr: kt_expr . EQUAL kt_expr
   66        | kt_expr . NOTEQUAL kt_expr
   67        | kt_expr . '<' kt_expr
   68        | kt_expr . '>' kt_expr
   69        | kt_expr . GREATEREQUAL kt_expr
   70        | kt_expr . LESSEREQUAL kt_expr
   71        | kt_expr . LOGICALAND kt_expr
   72        | kt_expr . LOGICALOR kt_expr
  101 expression: expression ',' kt_expr .

    EQUAL         shift, and go to state 83
    NOTEQUAL      shift, and go to state 84
    GREATEREQUAL  shift, and go to state 85
    LESSEREQUAL   shift, and go to state 86
    LOGICALAND    shift, and go to state 87
    LOGICALOR     shift, and go to state 88
    '<'           shift, and go to state 89
    '>'           shift, and go to state 90

    $default  reduce using rule 101 (expression)


State 175

  103 if_stmt: IF '(' expression ')' statement .
  104        | IF '(' expression ')' statement . ELSE statement

    ELSE  shift, and go to state 179

    $default  reduce using rule 103 (if_stmt)


State 176

  109 for_stmt: FOR '(' for_expr for_expr ')' . statement

    IDENTIFIER  shift, and go to state 135
    INT         shift, and go to state 2
    CHAR        shift, and go to state 3
    FLOAT       shift, and go to state 4
    SIGNED      shift, and go to state 5
    UNSIGNED    shift, and go to state 6
    SHORT       shift, and go to state 7
    LONG        shift, and go to state 8
    LONGLONG    shift, and go to state 9
    VOID        shift, and go to state 129
    RETURN      shift, and go to state 136
    IF          shift, and go to state 137
    FOR         shift, and go to state 138
    WHILE       shift, and go to state 139
    BREAK       shift, and go to state 140
    CONTINUE    shift, and go to state 141
    INCREMENT   shift, and go to state 11
    DECREMENT   shift, and go to state 12
    '{'         shift, and go to state 131

    datatype          go to state 142
    type              go to state 17
    sign              go to state 18
    type_specifier    go to state 19
    comp_statement    go to state 143
    statement         go to state 180
    stmt              go to state 146
    declaration_stmt  go to state 147
    variable_list     go to state 21
    variable          go to state 22
    array             go to state 23
    assignment_expr   go to state 24
    unary_expr        go to state 25
    fn_call           go to state 148
    if_stmt           go to state 149
    while_stmt        go to state 150
    for_stmt          go to state 151


State 177

  101 expression: expression . ',' kt_expr
  108 for_stmt: FOR '(' for_expr for_expr expression . ')' statement

    ','  shift, and go to state 169
    ')'  shift, and go to state 181


State 178

  105 while_stmt: WHILE '(' expression ')' statement .

    $default  reduce using rule 105 (while_stmt)


State 179

  104 if_stmt: IF '(' expression ')' statement ELSE . statement

    IDENTIFIER  shift, and go to state 135
    INT         shift, and go to state 2
    CHAR        shift, and go to state 3
    FLOAT       shift, and go to state 4
    SIGNED      shift, and go to state 5
    UNSIGNED    shift, and go to state 6
    SHORT       shift, and go to state 7
    LONG        shift, and go to state 8
    LONGLONG    shift, and go to state 9
    VOID        shift, and go to state 129
    RETURN      shift, and go to state 136
    IF          shift, and go to state 137
    FOR         shift, and go to state 138
    WHILE       shift, and go to state 139
    BREAK       shift, and go to state 140
    CONTINUE    shift, and go to state 141
    INCREMENT   shift, and go to state 11
    DECREMENT   shift, and go to state 12
    '{'         shift, and go to state 131

    datatype          go to state 142
    type              go to state 17
    sign              go to state 18
    type_specifier    go to state 19
    comp_statement    go to state 143
    statement         go to state 182
    stmt              go to state 146
    declaration_stmt  go to state 147
    variable_list     go to state 21
    variable          go to state 22
    array             go to state 23
    assignment_expr   go to state 24
    unary_expr        go to state 25
    fn_call           go to state 148
    if_stmt           go to state 149
    while_stmt        go to state 150
    for_stmt          go to state 151


State 180

  109 for_stmt: FOR '(' for_expr for_expr ')' statement .

    $default  reduce using rule 109 (for_stmt)


State 181

  108 for_stmt: FOR '(' for_expr for_expr expression ')' . statement

    IDENTIFIER  shift, and go to state 135
    INT         shift, and go to state 2
    CHAR        shift, and go to state 3
    FLOAT       shift, and go to state 4
    SIGNED      shift, and go to state 5
    UNSIGNED    shift, and go to state 6
    SHORT       shift, and go to state 7
    LONG        shift, and go to state 8
    LONGLONG    shift, and go to state 9
    VOID        shift, and go to state 129
    RETURN      shift, and go to state 136
    IF          shift, and go to state 137
    FOR         shift, and go to state 138
    WHILE       shift, and go to state 139
    BREAK       shift, and go to state 140
    CONTINUE    shift, and go to state 141
    INCREMENT   shift, and go to state 11
    DECREMENT   shift, and go to state 12
    '{'         shift, and go to state 131

    datatype          go to state 142
    type              go to state 17
    sign              go to state 18
    type_specifier    go to state 19
    comp_statement    go to state 143
    statement         go to state 183
    stmt              go to state 146
    declaration_stmt  go to state 147
    variable_list     go to state 21
    variable          go to state 22
    array             go to state 23
    assignment_expr   go to state 24
    unary_expr        go to state 25
    fn_call           go to state 148
    if_stmt           go to state 149
    while_stmt        go to state 150
    for_stmt          go to state 151


State 182

  104 if_stmt: IF '(' expression ')' statement ELSE statement .

    $default  reduce using rule 104 (if_stmt)


State 183

  108 for_stmt: FOR '(' for_expr for_expr expression ')' statement .

    $default  reduce using rule 108 (for_stmt)
